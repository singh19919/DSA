To get the kth largest remove the custom comparator  from priority queue and it will turn to max heap.

package com.prac;

//Java program for the above approach
import java.util.*;
class CustomComparator implements Comparator<Integer> {

	@Override
	public int compare(Integer number1, Integer number2) {
		return Integer.compare(number2, number1);
	}
}
class KthSmallest{

//Function to find kth smallest array element
static void kthSmallest(int []v, int N, int K)
{
	// Implement Max Heap using
	// a Priority Queue
	PriorityQueue<Integer> heap1 = new PriorityQueue<Integer>(new CustomComparator());

	for (int i = 0; i < N; ++i) {

		// Insert elements into
		// the priority queue
		heap1.add(v[i]);

		// If size of the priority
		// queue exceeds k
		if (heap1.size() > K) {
			heap1.remove();
		}
	}

	// Print the k-th smallest element
	System.out.print(heap1.peek() +"\n");
}

//Driver code
public static void main(String[] args)
{
	// Given array
	int []vec = { 5, 20, 10, 7, 1 };

	// Size of array
	int N = vec.length;

	// Given K
	int K = 3;

	// Function Call
	kthSmallest(vec, N, K % N);
}
}



